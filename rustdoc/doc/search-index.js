var searchIndex = JSON.parse('{\
"heat":{"doc":"A Finite Difference-based Thermal simulation module.","t":[6,17,17,0,0,0,0,0,0,0,0,0,0,0,3,12,11,11,11,11,12,12,11,11,12,12,11,12,11,11,11,11,11,3,17,12,12,11,11,11,11,12,11,11,11,11,11,12,12,12,11,11,11,11,13,13,3,17,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,12,12,17,17,3,17,17,11,11,11,11,11,11,11,12,11,11,11,12,5,11,11,12,5,5,5,5,5,5,11,11,12,11,11,11,11,3,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,12,12,11,11,11,17,3,11,11,11,12,11,12,11,11,12,11,11,11,12,11,12,11,11,11,12,11,11,11,12,6,6,3,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,12,11,5,11,12,11,12,12,12,12,5,11,11,11,11,11,5,12,8,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,11,11,10,10,10,11,3,11,11,11,11,11,11,12,11,11,11,12],"n":["Float","PI","SIGMA","cavity","convection","discretization","gas","glazing","heating_cooling","luminaire","model","surface","surface_trait","zone","Cavity","angle","borrow","borrow_mut","clone","clone_into","ein","eout","fmt","from","gas","height","into","thickness","to_owned","try_from","try_into","type_id","u_value","ConvectionParams","MIN_H","air_speed","air_temperature","borrow","borrow_mut","clone","clone_into","cos_surface_tilt","fmt","from","get_tarp_convection_coefficient","get_tarp_natural_convection_coefficient","into","rad_temperature","roughness_index","surface_temperature","to_owned","try_from","try_into","type_id","Back","Cavity","Discretization","MAX_RS","None","Solid","UValue","borrow","borrow","borrow_mut","borrow_mut","build","chunk_segments","clone","clone_into","default","discretize_construction","fmt","from","from","get_chunks","get_k_q","into","into","n_elements","new","r_value","segments","to_owned","try_from","try_from","try_into","try_into","tstep_subdivision","type_id","type_id","u_value","0","0","AIR","ARGON","Gas","KRYPTON","XENON","borrow","borrow_mut","cavity_convection","clone","clone_into","density","dynamic_viscosity","dynamic_viscosity","fmt","from","heat_capacity","heat_capacity","in_kelvin","into","mass","mass","nu_0_60","nu_60","nu_60_90","nu_90","nu_90_180","nusselt","raleigh","thermal_conductivity","thermal_conductivity","to_owned","try_from","try_into","type_id","Glazing","alpha_back","alpha_back","alpha_front","alpha_front","alphas","borrow","borrow_mut","clone","clone_into","combine","combine_layers","combined_alphas","combined_rho_back","combined_rho_front","combined_tau","fmt","from","get_back_glazing_system","get_front_glazing_system","get_glazing_from_iter","into","new","rho_back","rho_back","rho_front","rho_front","tau","tau","to_owned","try_from","try_into","type_id","ElectricHeater","IdealHeaterCooler","ThermalHVAC","borrow","borrow_mut","calc_cooling_heating_power","from","from","into","try_from","try_into","type_id","parent","parent","target_space_index","target_spaces","ThermalLuminaire","borrow","borrow_mut","from","from","into","parent","target_space_index","try_from","try_into","type_id","MODULE_NAME","ThermalModel","borrow","borrow_mut","calculate_zones_abc","dt","dt_subdivisions","dt_subdivisions","estimate_zones_future_temperatures","estimate_zones_mean_future_temperatures","fenestrations","from","get_current_zones_temperatures","get_thermal_zone","hvacs","into","luminaires","march","module_name","new","surfaces","try_from","try_into","type_id","zones","ThermalFenestration","ThermalSurface","ThermalSurfaceData","area","back_alphas","back_boundary","back_emissivity","back_hs","back_space_index","borrow","borrow_mut","calc_border_conditions","cos_tilt","discretization","from","front_alphas","front_boundary","front_emissivity","front_hs","front_space_index","into","is_windward","march","massive_chunks","new","nomass_chunks","normal","parent","perimeter","rk4","set_back_boundary","set_front_boundary","try_from","try_into","type_id","wind_speed_modifier","wind_speed_modifier","SurfaceTrait","add_back_convection_state","add_back_convective_heatflow_state","add_back_ir_irradiance_state","add_back_solar_irradiance_state","add_front_convection_state","add_front_convective_heatflow_state","add_front_ir_irradiance_state","add_front_solar_irradiance_state","add_node_temperature_states","back_convection_coefficient","back_infrared_irradiance","back_solar_irradiance","back_temperature","first_node_temperature_index","front_convection_coefficient","front_infrared_irradiance","front_solar_irradiance","front_temperature","get_node_temperatures","last_node_temperature_index","set_back_convection_coefficient","set_front_convection_coefficient","set_node_temperatures","ThermalZone","borrow","borrow_mut","from","from_space","into","mcp","reference_space","try_from","try_into","type_id","volume"],"q":["heat","","","","","","","","","","","","","","heat::cavity","","","","","","","","","","","","","","","","","","","heat::convection","","","","","","","","","","","","","","","","","","","","","heat::discretization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heat::discretization::UValue","","heat::gas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heat::glazing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heat::heating_cooling","","","","","","","","","","","","heat::heating_cooling::ThermalHVAC","","","","heat::luminaire","","","","","","","","","","","heat::model","","","","","","","","","","","","","","","","","","","","","","","","","heat::surface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heat::surface_trait","","","","","","","","","","","","","","","","","","","","","","","","heat::zone","","","","","","","","","","",""],"d":["The kind of Floating point number used in the library… …","Well, $<code>\\\\pi</code>$","The Stefan–Boltzmann constant (in $<code>W m^{-2} K^4</code>$), …","For dealing with Cavities, i.e., layers made out of a gas …","For calculating convection coefficients under different …","For creating thermal networks for heat-transfering …","Definitions for the thermal properties of gases.","Glazing layer abstracted to only their optical properties.","For HVAC-related calculations.","","The main thermal model, which manages the whole …","For calculating heat transfer through all kinds of …","","For calculating the temperatures within Spaces.","Represents some gas enclosed by two solid materials","The angle of the cavity in radians. $<code>0</code>$ is horizontal; $…","","","","","The thermal emissivity of the material at the inner side …","The thermal emissivity of the material at the outer side …","","Returns the argument unchanged.","The gas contained","Height of the <code>Cavity</code>. Defined by ISO15099/2003 as “the …","Calls <code>U::from(self)</code>.","The distance between the two materials, in $<code>m</code>$","","","","","Calculates the <code>U-value</code>—including convective and …","Represents a border condition of between a Surface and a …","","The wind speed, in m/2","The dry bulb temperature of the air, in $<code>C</code>$","","","","","The cosine of the surface tilt. Zero is 90 degrees; &gt;0 …","","Returns the argument unchanged.","Calculates the exterior convection coefficient according …","Calculates the indoor (i.e., natural) convection …","Calls <code>U::from(self)</code>.","The incident Infrared Irradiance, in $<code>W/m^2</code>$","The roughness index, between 1 (Very Rough) and 6 (Very …","The surface temperature in $<code>C</code>$","","","","","The resistance is a surface coefficient.","A cavity, comprised of a gas","Represents the discretization of a <code>Construction</code> for heat …","","Undefined yet","A normal (i.e., $<code>\\\\lambda/\\\\Delta x</code>$) U-value","Represents a thermal connection in the thermal network. It …","","","","","Creates the <code>segments</code> of the <code>Discretization</code>.","Auxiliary function for <code>get_chunks()</code> function","","","","Given a Maximum element thickness ($<code>\\\\Delta x_{max}</code>$) and a …","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a a the segments that correspond to Massive and …","Produces $<code>\\\\overline{K}</code>$ and $<code>\\\\vec{q}</code>$ (as in the equation $…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The number of elements on each layer","Creates a new <code>Discretization</code>.","Calculates the R value of the whole system","Contains the node’s mass and the <code>UValue</code> of each segment","","","","","","Contains the minimum number of timesteps per model …","","","Gets the U-value of a <code>UValue</code> object","","","Returns a gas with the properties of Air","Returns a gas with the properties of argon","A structure containing the data that will describe the …","A gas with the properties of krypton","A gas with the properties of xenon","","","Calculates the convective heat transfer coefficient within …","","","Derives the density based on the temperature (in $<code>K</code>$)","Derives the Dynamic Viscosity at a certain Temperature (in …","The dynamic viscosity ( $<code>{N.s}/{m^2}</code>$) as a function of the","","Returns the argument unchanged.","Derives the Soecific Heat Capacity at a certain …","The specific heat capacity ($<code>{J}/{kg.K}</code>$) as a function of …","Transforms C into K","Calls <code>U::from(self)</code>.","Retreives the Molecular Mass","THe Molecular Mass ($<code>{kg}/{Mol}</code>$)","Calculates the Nusselt number for cavities tilted between $…","Calculates the Nusselt number for cavities tilted $<code>60^o</code>$","Calculates the Nusselt number for cavities tilted between $…","Calculates the Nusselt number for cavities tilted $<code>90^o</code>$","Calculates the Nusselt number for cavities tilted between $…","Calculates the Nusselt of a cavity number based on the …","Calculates the Raleigh number of a <code>Gas</code> cavity based on its …","Derives the Thermal Conductivity at a certain Temperature …","The thermal conductivity ($<code>{W}/{m.K}</code>$) as a function of the","","","","","An abstraction of a glazing layer for optical purposes.","Gets the back absorbtance","Absorbtance $<code>\\\\alpha_b</code>$ on the back side","Gets the front absorbtance","Absorbtance $<code>\\\\alpha_f</code>$ on the front side","Calculates the absorbtances of each <code>Glazing</code> of the system, …","","","","","Combines two <code>Glazing</code> into a new <code>Glazing</code>","Combines several <code>Glazing</code> into a new <code>Glazing</code>","Calculates the front solar absorbtance of two <code>Glazing</code> …","Calculates the overall back reflectance of a system of two …","Calculates the overall front reflectance of a system of …","Calculates the overall transmittance of a system of two …","","Returns the argument unchanged.","Gets the front back translucent in a construction","Gets the front translucent layers in a construction","","Calls <code>U::from(self)</code>.","Creates a new <code>Glazing</code>","Gets the back reflectance","Reflectance $<code>\\\\rho_b</code>$ on the back side","Gets the front reflectance","Reflectance $<code>\\\\rho_f</code>$ on the front side.","Gets the transmittance","Transmittance $<code>\\\\tau</code>$","","","","","Electric heater.","An ideal heater cooler","An HVAC element from the point of view of the thermal …","","","Retrieves a <code>Vec&lt;(usize, Float)&gt;</code> containing the amount of …","Returns the argument unchanged.","Builds a new <code>ThermalHVAC</code> from an HVAC and its location","Calls <code>U::from(self)</code>.","","","","The parent HVAC","The parent HVAC","The space this heater is heating","The space this HVAC is heating/cooling","An HVAC element from the point of view of the thermal …","","","Returns the argument unchanged.","Builds a new [<code>ThermalHVAC</code>] from an HVAC and its location","Calls <code>U::from(self)</code>.","The parent Luminaire","The space whwre the luminaire is located","","","","The module name. For debugging purposes","A structure containing all the thermal representation of …","","","This estimation assumes nothing changes during this time. …","The model’s dt (i.e., main_dt / self.dt_subdivisions)","Retrieves the dt_subdivisions (i.e. the number of …","The number of steps that this model needs to take in order …","Uses an analytical solution to estimate the future Zones …","Uses an analytical solution to estimate an average …","All the Fenestrations in the model","Returns the argument unchanged.","Retrieves a vector of the current temperatures of all the …","Retrieves a ThermalZone","HVAC systems","Calls <code>U::from(self)</code>.","Luminaires","Advances one main_timestep through time. That is, it …","","Creates a new ThermalModel from a SimpleModel.","All the surfaces in the model","","","","All the Thermal Zones in the model","A <code>ThermalSurfaceData</code> whose parent is a <code>Fenestration</code>","A <code>ThermalSurfaceData</code> whose parent is a <code>Surface</code>","This is a Surface from the point of view of our thermal …","The area of the Surface","The absorbtances of each node in the system, proportional …","The front boundary","The thermal absorbtance on the back side (from 0 to 1)","[<strong>Only available during testing</strong>] this allows setting a …","The index of the space at the back of this, if any","","","","The cosine of the tilt angle (normal * Vector3D(0., 0., …","The <code>Discretization</code> that represents this <code>ThermalSurfaceData</code>","Returns the argument unchanged.","The absorbtances of each node in the system, proportional …","The back boundary","The thermal absorbtance on the front side (from 0 to 1)","[<strong>Only available during testing</strong>] this allows setting a …","The index of the space in front of this, if any","Calls <code>U::from(self)</code>.","Calculates whether a surface is facing the wind direction …","Marches one timestep. Returns front and back heat flow    ","The chunks of nodes that have mass","Creates a new <code>ThermalSurfaceData</code>","The chunks of nodes that have nomass","The normal of the surface","A reference to the element in the <code>SimpleModel</code> which this …","The perimeter of the surface","Marches forward through time, solving the Ordinary …","Sets the back boundary","Sets the front boundary","","","","Calculates a surface’s wind speed modifier; that is to …","The wind velocity changes with altitude. This field stores …","A trait for defining shared behaviour between <code>Surface</code> and …","Adds the back-convection state element","Adds the back convective heat flow state element","Adds the front infra red solar irradiance state element","Adds the back solar irradiance state element","Adds the front-convection state element","Adds the front convective heat flow state element","Adds the front infra red solar irradiance state element","Adds the front solar irradiance state element","Adds the temperature state elements for all the nodes in …","Gets the back convection coefficient","Gets the back IR irradiance","Gets the back solar irradiance","Gets the  temperature last (i.e., back) node","Gets the index (in the simulation state) of the …","Gets the front convection coefficient     ","Gets the front IR irradiance","Gets the front solar irradiance","Gets the  temperature first (i.e., front) node","Retrieves a matrix with the temperatures in all the nodes","Gets the index (in the simulation state) of the …","Sets the back convection coefficient","Sets the front convection coefficient","Sets the temperatures in all the nodes, based on a matrix","A thermal representation of a <code>Space</code>","","","Returns the argument unchanged.","This function creates a new ThermalZone from a Space. It …","Calls <code>U::from(self)</code>.","Retrieves the heat capacity of the ThermalZone’s air","The <code>Space</code> that this [<code>Thermal Zone</code>] represents","","","","volume of the zone"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,15,15,0,0,15,15,0,13,15,13,15,13,13,15,15,15,13,15,13,15,13,13,13,15,13,13,13,13,15,13,15,13,15,13,13,15,15,35,36,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,0,17,17,17,0,0,0,0,0,0,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,20,20,0,20,20,20,20,20,20,20,20,20,37,38,38,37,0,23,23,23,23,23,23,23,23,23,23,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,31,31,31,31,31,31,31,0,31,31,31,31,31,0,31,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,25,25,25,25,25,25,25,25,25,25,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],0,0,[[1,2],3],[[]],0,0,[[]],0,[[]],[[],4],[[],4],[[],5],[[1,6,6],6],0,0,0,0,[[]],[[]],[7,7],[[]],0,[[7,2],3],[[]],[[7,6,6,8],6],[7,6],[[]],0,0,0,[[]],[[],4],[[],4],[[],5],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[9,10,11,[12,[11]],6,6],[[4,[13,14]]]],[13,12],[15,15],[[]],[[],15],[[9,10,6,6,6],[[4,[14]]]],[[15,2],3],[[]],[[]],[13],[[13,11,11,16,7,6,6,7,6,6]],[[]],[[]],0,[[9,10,6,6,6,6,6],[[4,[13,14]]]],[13,6],0,[[]],[[],4],[[],4],[[],4],[[],4],0,[[],5],[[],5],[[15,6,6],6],0,0,0,0,0,0,0,[[]],[[]],[[17,6,6,6,6,6],6],[17,17],[[]],[[17,6],6],[[17,6],6],0,[[17,2],3],[[]],[[17,6],6],0,[6,6],[[]],[17,6],0,[[6,6,6],6],[[6,6],6],[[6,6,6],6],[[6,6],6],[[6,6,6],6],[[6,6,6],6],[[17,6,6,6],6],[[17,6],6],0,[[]],[[],4],[[],4],[[],5],0,[18,6],0,[18,6],0,[[],[[12,[6]]]],[[]],[[]],[18,18],[[]],[[18,18],18],[[],18],[[18,18]],[[18,18],6],[[18,18],6],[[18,18],6],[[18,2],3],[[]],[[19,10],[[4,[[12,[18]],14]]]],[[19,10],[[4,[[12,[18]],14]]]],[[10,11],[[4,[[12,[18]],14]]]],[[]],[[6,6,6],18],[18,6],0,[18,6],0,[18,6],0,[[]],[[],4],[[],4],[[],5],0,0,0,[[]],[[]],[[20,21],[[4,[12,14]]]],[[]],[[22,10],[[4,[20,14]]]],[[]],[[],4],[[],4],[[],5],0,0,0,0,0,[[]],[[]],[[]],[[9,10],[[4,[23,14]]]],[[]],0,0,[[],4],[[],4],[[],5],0,0,[[]],[[]],[[24,10,21],[[4,[14]]]],0,[24,11],0,[[24,6],[[12,[6]]]],[[24,6],[[12,[6]]]],0,[[]],[[24,21],[[12,[6]]]],[[24,11],[[4,[25,14]]]],0,[[]],0,[[24,26,10,21],[[4,[14]]]],[[],27],[[28,10,29,11],[[4,[24,14]]]],0,[[],4],[[],4],[[],5],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[31,[30]],21,6,6,6,6]],0,0,[[]],0,0,0,0,0,[[]],[[6,6,32],8],[[[31,[30]],21,6,6,6,6,6]],0,[[29,10,33,11,9,6,6,6,32,9,13],[[4,[[31,[30]],14]]]],0,0,0,0,[[6,16,16,16,16]],[[[31,[30]],34,10]],[[[31,[30]],34,10]],[[],4],[[],4],[[],5],[[6,33],6],0,0,[[29,11]],[[29,11]],[[29,11]],[[29,11]],[[29,11]],[[29,11]],[[29,11]],[[29,11]],[[29,11,11]],[21,[[33,[6]]]],[21,6],[21,6],[21,6],[[],11],[21,[[33,[6]]]],[21,6],[21,6],[21,6],[21,16],[[],11],[[21,6]],[[21,6]],[[21,16]],0,[[]],[[]],[[]],[[9,29,11],25],[[]],[[25,6],6],0,[[],4],[[],4],[[],5],0],"p":[[3,"Cavity"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[6,"Float"],[3,"ConvectionParams"],[15,"bool"],[3,"Rc"],[3,"SimpleModel"],[15,"usize"],[3,"Vec"],[3,"Discretization"],[3,"String"],[4,"UValue"],[6,"Matrix"],[3,"Gas"],[3,"Glazing"],[3,"Construction"],[4,"ThermalHVAC"],[6,"SimulationState"],[4,"HVAC"],[3,"ThermalLuminaire"],[3,"ThermalModel"],[3,"ThermalZone"],[3,"Date"],[15,"str"],[3,"MetaOptions"],[3,"SimulationStateHeader"],[8,"SurfaceTrait"],[3,"ThermalSurfaceData"],[3,"Vector3D"],[4,"Option"],[4,"Boundary"],[13,"Solid"],[13,"Cavity"],[13,"IdealHeaterCooler"],[13,"ElectricHeater"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
